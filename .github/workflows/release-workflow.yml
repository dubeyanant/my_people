name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Specify which version to bump (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
      release_type:
        description: "Specify the type of release"
        required: true
        default: "single_android"
        type: choice
        options:
          - single_android
          - split_android
          - single_android_ios
          - split_android_ios

jobs:
  release:
    runs-on: ${{ github.event.inputs.release_type == 'single_android_ios' || github.event.inputs.release_type == 'split_android_ios' && 'macos-latest' || 'ubuntu-latest' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Bump version in pubspec.yaml
        id: bump_version
        run: |
          python - <<EOF
          import yaml

          with open('pubspec.yaml', 'r') as file:
              data = yaml.safe_load(file)

          current_version = data['version']
          major, minor, patch = map(int, current_version.split('.'))

          version_type = '${{ github.event.inputs.version_type }}'
          if version_type == 'major':
              major += 1
              minor = patch = 0
          elif version_type == 'minor':
              minor += 1
              patch = 0
          else:
              patch += 1

          new_version = f"{major}.{minor}.{patch}"
          data['version'] = new_version

          with open('pubspec.yaml', 'w') as file:
              yaml.safe_dump(data, file)

          print(f"::set-output name=current_version::{current_version}")
          print(f"::set-output name=new_version::{new_version}")
          print(f"Version bumped from {current_version} to {new_version}")
          EOF

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: "17.x"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.0"

      - name: Decode Keystore
        env:
          ENCODED_KEYSTORE: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo $ENCODED_KEYSTORE | base64 -d > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../app/keystore.jks" >> android/key.properties

      - name: Create .env file
        run: |
          echo "GEMINI_KEY=${{ secrets.GEMINI_KEY }}" > .env
          echo "PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}" >> .env
          echo "PUBLIC_SUPABASE_ANON_KEY=${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}" >> .env

      - name: Build Android (Single)
        if: github.event.inputs.release_type == 'single_android' || github.event.inputs.release_type == 'single_android_ios'
        run: flutter build apk --release

      - name: Build Android (Split)
        if: github.event.inputs.release_type == 'split_android' || github.event.inputs.release_type == 'split_android_ios'
        run: |
          flutter build apk --release --split-per-abi
          flutter build apk --release  # This builds the universal APK

      - name: Build iOS
        if: github.event.inputs.release_type == 'single_android_ios' || github.event.inputs.release_type == 'split_android_ios'
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

      - name: Generate CHANGELOG
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version-file: "./pubspec.yaml"
          version-path: "version"
          skip-version-file: "true"
          skip-on-empty: "false"
          skip-commit: "true"
          skip-tag: "true"
          output-file: "CHANGELOG.md"
          release-count: 0
          tag-prefix: "v"
          version: ${{ steps.bump_version.outputs.new_version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
          draft: false
          prerelease: false

      - name: Upload Single Android APK
        if: github.event.inputs.release_type == 'single_android' || github.event.inputs.release_type == 'single_android_ios'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: app-release-${{ steps.bump_version.outputs.new_version }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload arm64-v8a APK
        if: github.event.inputs.release_type == 'split_android' || github.event.inputs.release_type == 'split_android_ios'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: app-${{ steps.bump_version.outputs.new_version }}-arm64-v8a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload armeabi-v7a APK
        if: github.event.inputs.release_type == 'split_android' || github.event.inputs.release_type == 'split_android_ios'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: app-${{ steps.bump_version.outputs.new_version }}-armeabi-v7a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload x86_64 APK
        if: github.event.inputs.release_type == 'split_android' || github.event.inputs.release_type == 'split_android_ios'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-x86_64-release.apk
          asset_name: app-${{ steps.bump_version.outputs.new_version }}-x86_64-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Universal APK
        if: github.event.inputs.release_type == 'split_android' || github.event.inputs.release_type == 'split_android_ios'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: app-${{ steps.bump_version.outputs.new_version }}-universal-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload iOS IPA
        if: github.event.inputs.release_type == 'single_android_ios' || github.event.inputs.release_type == 'split_android_ios'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/ios/iphoneos/app.ipa
          asset_name: app-ios-${{ steps.bump_version.outputs.new_version }}.ipa
          asset_content_type: application/octet-stream

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml CHANGELOG.md
          git commit -m "chore(release): v${{ steps.bump_version.outputs.new_version }} [skip ci]"

          # Check if the tag already exists
          if git rev-parse "v${{ steps.bump_version.outputs.new_version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.bump_version.outputs.new_version }} already exists. Skipping tag creation."
          else
            git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "v${{ steps.bump_version.outputs.new_version }}"
          fi

          git push --follow-tags
